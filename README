# 智慧點餐系統

一個結合自然語言處理的飲料店點餐系統，包含前台點餐介面和後台管理系統。

## 系統需求

- Python 3.8+
- MySQL 5.7+
- 有效的 OpenAI API 金鑰

## 專案結構



## 安裝步驟

1. 複製專案
```bash
git clone https://github.com/your-username/smartorder_system.git
cd smartorder_system


## 建立虛擬環境

python -m venv .venv
source .venv/bin/activate  # macOS/Linux
# 或
.venv\Scripts\activate     # Windows

##安裝相依套件
pip install -r requirements.txt



##設定環境變數 在專案根目錄建立 .env 檔案，填入以下內容：

# 資料庫設定
DB_HOST='your_db_host'
DB_PORT='3306'
DB_USER='your_db_user'
DB_PASSWORD='your_db_password'
DB_NAME='beverage_db'

# OpenAI API 設定
OPENAI_API_KEY='your_openai_api_key'

# Flask 設定
FLASK_ENV=development
SECRET_KEY='your_secret_key'  # 用於加密 session，可使用 python -c "import secrets; print(secrets.token_hex())" 生成


#啟動方式
#方法一
python run.py


#方法二：分別運行
#啟動前台
cd frontend
python app.py

#啟動後台
cd admin_backend
python app.py

系統說明
    前台功能
        自然語言點餐介面
        語音辨識點餐
        訂單即時狀態查詢
    後台功能
        訂單管理與處理
        批量訂單操作
        銷售數據分析
        
環境變數說明
    DB_HOST: 資料庫主機位址
    DB_PORT: 資料庫連接埠（預設 3306）
    DB_USER: 資料庫使用者名稱
    DB_PASSWORD: 資料庫密碼
    DB_NAME: 資料庫名稱
    OPENAI_API_KEY: OpenAI API 金鑰（用於自然語言處理）
    SECRET_KEY: Flask session 加密金鑰（用於保護使用者資料）


#常見問題

SECRET_KEY 是什麼？

    這是 Flask 用來加密 session 資料的金鑰
    可以使用以下指令生成：
        python -c "import secrets; print(secrets.token_hex())"

資料庫連接失敗？
    確認 MySQL 服務是否運行中
    檢查 .env 中的資料庫設定是否正確
    確認資料庫使用者有適當的權限

確認 MySQL 服務是否運行中
檢查 .env 中的資料庫設定是否正確
確認資料庫使用者有適當的權限


授權條款
    MIT License



